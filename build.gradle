/* Gradle plugins part */
buildscript {
    ext {
        kotlinVersion = "1.1.4-3"
        kotlinCoroutinesVersion = "0.18"
        jacksonVersion = "2.8.9"
        okhttpVersion = "3.8.1"
        undertowVersion = "1.4.18.Final"
        kafkaVersion = "0.11.0.0"

        // plugins
        dependencyPluginVersion = "1.0.3.RELEASE"
        shadowPluginVersion = "2.0.1"

        // tests
        junitVersion = "5.0.0-RC3"
        junitPlatformVersion = "1.0.0-RC3"
        mockitoVersion = "2.1.0"
        mockitoKotlinVersion = "0.7.0"

        // logs
        slf4jVersion = "1.7.25"
        lockbackVersion = "1.2.3"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("io.spring.gradle:dependency-management-plugin:$dependencyPluginVersion")
        classpath("org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion")
        classpath("com.github.jengelman.gradle.plugins:shadow:$shadowPluginVersion")
    }
}


subprojects {
/* Gradle plugins settings part */
    apply plugin: "kotlin"
    apply plugin: "org.junit.platform.gradle.plugin"
    apply plugin: "io.spring.dependency-management"

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

/* Java dependencies part */
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            dependency("org.slf4j:slf4j-api:$slf4jVersion")
            dependency("ch.qos.logback:logback-classic:$lockbackVersion")

            dependency("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
            dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion")

            dependency("com.squareup.okhttp3:okhttp:$okhttpVersion")
            dependency("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
            dependency("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")

            dependency("io.undertow:undertow-core:$undertowVersion")

            dependency("org.apache.kafka:kafka-clients:$kafkaVersion")

            dependency("org.junit.jupiter:junit-jupiter-api:$junitVersion")
            dependency("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
            dependency("org.mockito:mockito-core:$mockitoVersion")
            dependency("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion")
            dependency("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
        }
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testCompile("org.junit.platform:junit-platform-launcher")
        testCompile("org.mockito:mockito-core")
        testCompile("com.nhaarman:mockito-kotlin")
        testRuntime("org.junit.jupiter:junit-jupiter-engine")
    }
}

project(":connectors") {
    apply plugin: "application"

    dependencies {
        compile(project(":core"))
        compile("io.undertow:undertow-core")
    }

    mainClassName = "fund.cyber.markets.connectors.ConnectorsApplicationKt"

    run {
        systemProperties System.getProperties()
    }
}

project(":core") {
    dependencies {
        compile("org.slf4j:slf4j-api")
        compile("ch.qos.logback:logback-classic")

        compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
        compile("org.jetbrains.kotlin:kotlin-reflect")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8")

        compile("io.undertow:undertow-core")

        compile("com.squareup.okhttp3:okhttp")
        compile("com.fasterxml.jackson.core:jackson-databind")
        compile("com.fasterxml.jackson.module:jackson-module-kotlin")

        compile("org.apache.kafka:kafka-clients")
    }
}

project(":stream-api") {
    apply plugin: "application"

    dependencies {
        compile(project(":core"))
        compile("io.undertow:undertow-core")
    }

    mainClassName = "fund.cyber.markets.StreamApiApplication"
}

project(":stream-processing") {
    apply plugin: "com.github.johnrengelman.shadow"

    ext {
        sparkVersion = "2.2.0"
    }

    dependencies {
        // Dependencies which will be included in fatjar
        compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")

        // Spark dependencies. TODO: Add to version management
        compileOnly("org.apache.spark:spark-sql_2.11:$sparkVersion")
        compileOnly("org.apache.spark:spark-streaming_2.11:$sparkVersion")

        compileOnly("org.apache.kafka:kafka_2.11:$kafkaVersion")
        compileOnly("org.apache.spark:spark-streaming-kafka-0-10_2.11:$sparkVersion")
        compileOnly("org.apache.spark:spark-sql-kafka-0-10_2.11:$sparkVersion")
    }
}
