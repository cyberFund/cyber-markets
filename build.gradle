/* Gradle plugins part */
buildscript {
    ext {
        kotlinVersion = "1.2.51"
        kotlinCoroutinesVersion = "0.19.3"

        jacksonVersion = "2.9.2"
        httpClientVersion = "4.5.5"
        web3jVersion = "3.4.0"
        rxkotlinVersion = "2.2.0"
        reactorVersion = "3.1.7.RELEASE"
        cassandraVersion = "3.5.0"
        ehcacheVersion = "3.4.0"

        xchangeStreamCoreVersion = "4.3.2"
        xchangeStreamVersion = "4.3.3-SNAPSHOT"

        springBootVersion = "2.0.2.RELEASE"
        springKafkaVersion = "2.1.7.RELEASE"
        springCassandraVersion = "2.0.8.RELEASE"

        // metrics
        micrometerVersion = "1.0.0"

        // plugins
        dependencyPluginVersion = "1.0.3.RELEASE"
        shadowPluginVersion = "2.0.1"

        // tests
        junitVersion = "5.2.0"
        junitPlatformVersion = "1.0.3"
        mockitoVersion = "2.18.3"
        mockitoKotlinVersion = "1.6.0"

        // logs
        slf4jVersion = "1.7.25"
        lockbackVersion = "1.2.3"
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev/' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        maven { url 'https://repo.spring.io/libs-milestone' }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")

        classpath("io.spring.gradle:dependency-management-plugin:$dependencyPluginVersion")
        classpath("org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion")
        classpath("com.github.jengelman.gradle.plugins:shadow:$shadowPluginVersion")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
    distributionType = Wrapper.DistributionType.ALL
}


subprojects {
    apply plugin: "kotlin"
    apply plugin: 'kotlin-spring'
    apply plugin: "org.junit.platform.gradle.plugin"
    apply plugin: "io.spring.dependency-management"

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        //xchange snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencyManagement {
        dependencies {
            imports {
                mavenBom "org.springframework.boot:spring-boot-starter-parent:$springBootVersion"
            }

            dependency("org.slf4j:slf4j-api:$slf4jVersion")
            dependency("ch.qos.logback:logback-classic:$lockbackVersion")

            dependency("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
            dependency("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
            dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion")

            dependency("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
            dependency("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion") {
                exclude 'org.jetbrains.kotlin:kotlin-stdlib'
            }

            dependency("org.springframework.boot:spring-boot-starter:$springBootVersion")
            dependency("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")
            dependency("org.springframework.boot:spring-boot-starter-webflux:$springBootVersion")
            dependency("org.springframework.boot:spring-boot-starter-reactor-netty:$springBootVersion")

            dependency("org.springframework.kafka:spring-kafka:$springKafkaVersion")
            dependency("org.springframework.kafka:spring-kafka-test:$springKafkaVersion")

            dependency("org.springframework.boot:spring-boot-starter-test:$springBootVersion")

            dependency("org.junit.jupiter:junit-jupiter-api:$junitVersion")
            dependency("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
            dependency("org.mockito:mockito-core:$mockitoVersion")
            dependency("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion") {
                exclude 'org.jetbrains.kotlin:kotlin-stdlib'
            }
            dependency("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

            dependency("org.springframework.data:spring-data-cassandra:$springCassandraVersion")
            dependency("org.springframework.data:spring-data-commons:$springCassandraVersion")
            dependency("com.datastax.cassandra:cassandra-driver-core:$cassandraVersion")
            dependency("com.datastax.cassandra:cassandra-driver-mapping:$cassandraVersion")
            dependency("com.datastax.cassandra:cassandra-driver-extras:$cassandraVersion")

            dependency("io.reactivex.rxjava2:rxkotlin:$rxkotlinVersion") {
                exclude 'org.jetbrains.kotlin:kotlin-stdlib'
            }
            dependency("io.projectreactor:reactor-core:$reactorVersion")

            dependency("info.bitrich.xchange-stream:xchange-stream-core:$xchangeStreamCoreVersion")
            dependency("info.bitrich.xchange-stream:xchange-bitfinex:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-bitflyer:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-binance:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-bitstamp:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-gdax:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-gemini:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-hitbtc:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-okcoin:$xchangeStreamVersion")
            dependency("info.bitrich.xchange-stream:xchange-poloniex2:$xchangeStreamVersion")

            dependency("org.web3j:core:$web3jVersion")

            dependency("io.micrometer:micrometer-core:$micrometerVersion")
            dependency("io.micrometer:micrometer-registry-prometheus:$micrometerVersion")

            dependency("org.ehcache:ehcache:$ehcacheVersion")
        }
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testCompile("org.junit.platform:junit-platform-launcher")
        testCompile("org.mockito:mockito-core")
        testCompile("com.nhaarman:mockito-kotlin")
        testRuntime("org.junit.jupiter:junit-jupiter-engine")
    }
}

project(":common") {

    dependencies {
        compile("org.slf4j:slf4j-api")
        compile("ch.qos.logback:logback-classic")

        compile("org.jetbrains.kotlin:kotlin-reflect")
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8")

        compile("com.fasterxml.jackson.core:jackson-databind")
        compile("com.fasterxml.jackson.core:jackson-annotations")
        compile("com.fasterxml.jackson.module:jackson-module-kotlin")
        compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
        compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

        compile("io.reactivex.rxjava2:rxkotlin")
    }
}

project(":common-kafka") {

    dependencies {
        compileOnly project(":common")

        compile("org.springframework.kafka:spring-kafka")
    }
}

project(":common-rest-api") {

    dependencies {
        compileOnly project(":common")

        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-webflux'
        compile 'org.springframework.boot:spring-boot-starter-reactor-netty'
    }
}

project(":stream-api") {
    apply plugin: "application"

    dependencies {
        compile project(":common")
        compile project(":common-kafka")
        compile("io.undertow:undertow-core")
    }

    mainClassName = "fund.cyber.markets.StreamApiApplication"
}

project(":rest-api") {

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(":common")
        compile project(":common-rest-api")
        compile project(":cassandra-service")

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'com.nhaarman:mockito-kotlin'
    }
}

project(":exchanges-connector") {

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(":common")
        compile project(":common-kafka")
        compile project(":common-rest-api")

        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.boot:spring-boot-starter-aop'
        compile 'org.springframework.kafka:spring-kafka'

        compile 'org.web3j:core'

        compile 'io.micrometer:micrometer-core'
        compile 'io.micrometer:micrometer-registry-prometheus'

        compile 'info.bitrich.xchange-stream:xchange-stream-core'
        compile 'info.bitrich.xchange-stream:xchange-bitfinex'
        compile 'info.bitrich.xchange-stream:xchange-bitflyer'
        compile 'info.bitrich.xchange-stream:xchange-binance'
        compile 'info.bitrich.xchange-stream:xchange-bitstamp'
        compile 'info.bitrich.xchange-stream:xchange-gdax'
        compile 'info.bitrich.xchange-stream:xchange-gemini'
        compile 'info.bitrich.xchange-stream:xchange-hitbtc'
        compile 'info.bitrich.xchange-stream:xchange-okcoin'
        compile 'info.bitrich.xchange-stream:xchange-poloniex2'

        testCompile 'org.springframework:spring-test'
        testCompile 'org.springframework.kafka:spring-kafka-test'
    }
}

project(":cassandra-service") {

    apply plugin: "kotlin-noarg"

    dependencies {
        compileOnly project(":common")
        compile 'io.projectreactor:reactor-core'

        compile 'org.springframework.data:spring-data-cassandra'
        compile 'com.datastax.cassandra:cassandra-driver-core'
        compile 'com.datastax.cassandra:cassandra-driver-mapping'
        compile 'com.datastax.cassandra:cassandra-driver-extras'
    }
}

project(":storer") {

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(":common")
        compile project(":common-kafka")
        compile project(":common-rest-api")
        compile project(":cassandra-service")
    }
}